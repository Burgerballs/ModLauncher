import flixel.FlxG;

import Main;

import funkin.Preferences;
import funkin.modding.base.ScriptedMusicBeatState;
import funkin.modding.module.ModuleHandler;
import funkin.modding.module.Module;
import funkin.save.Save;
import funkin.ui.title.TitleState;
import funkin.util.WindowUtil;

class ModLauncher_Init extends Module {
	public var initialized:Bool = false;
	public var bootstrap:Bool = false;
	
	public function new() {
		super("ModLauncher_Init", 1);
	}
	
	public function onCreate(event:ScriptEvent):Void {
		if (Save.instance.modOptions.get("ModLauncher") == null) {
			Save.instance.modOptions.set("ModLauncher", {
				selected_mod: ""
			});
		}
		
		if (ModuleHandler.getModule("BootStrapBinds") != null) {
			trace("ModBootstrap found, adding to BootStrapBinds");
			bootstrap = true;
			ModuleHandler.getModule("BootStrapBinds").scriptCall("bind", [{
				name: "ModLauncher",
				description: "A simple system for launching mod states on startup.",
				target: "ModLauncher_State",
				logo: '',
				bg: 'ModLauncher/fnf/bricks',
				icon: 'fnficon32',
				author: "cyn0x8",
				color: 0xFFff2b77,
				bg_group: (group) -> {
					return; // do nothing.
				},
				disclaimer: "If no mods installed supports ModLauncher, it will simply open base game instead."
			}]);
		} else {
			Main.fpsCounter.alpha = 0.0001;
			Main.memoryCounter.alpha = 0.0001;
			FlxG.mouse.set_visible(false);
		}		
		WindowUtil.windowExit.add(exit);
	}
	
	public function onStateChangeEnd(event:StateChangeScriptEvent):Void {
		if (Std.isOfType(event.targetState, TitleState)) {
			if (initialized || (!initialized && Save.instance.modOptions.get("ModLauncher").selected_mod == "none") || bootstrap) {
				return;
			}
			
			FlxG.switchState(ScriptedMusicBeatState.init("ModLauncher_State"));
			
			initialized = true;
		}
	}
	
	public function onDestroy(event:ScriptEvent):Void {
		trace("refreshing with selected mod \"" + Save.instance.modOptions.get("ModLauncher").selected_mod + "\"");
		
		if (Save.instance.modOptions.get("ModLauncher").selected_mod == "none") {
			Save.instance.modOptions.get("ModLauncher").selected_mod = "";
		}
		
		Save.instance.flush();
		
		if (WindowUtil.windowExit.has(exit)) {
			WindowUtil.windowExit.remove(exit);
		}
	}
	
	public function exit(?_):Void {
		Save.instance.modOptions.get("ModLauncher").selected_mod = "";
		
		Save.instance.flush();
		
		trace("selected mod cleared");
	}
}
